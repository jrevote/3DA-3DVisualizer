/***********************************************************************
XDMFFile - Class to encapsulate operations on files generated by the
CITCOMT simulation code.
Copyright (c) 2006-2007 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <iomanip>
#include <Misc/ThrowStdErr.h>
#include <Misc/File.h>
#include <Misc/LargeFile.h>
#include <Plugins/FactoryManager.h>
#include <Math/Math.h>
#include <Geometry/Endianness.h>
#include <Concrete/EarthDataSet.h>
#include <Concrete/XDMFFile.h>
#include <Xdmf.h>

namespace Visualization {

namespace Concrete {

/****************************
Methods of class XDMFFile:
****************************/

XDMFFile::XDMFFile(void)
	:BaseModule("XDMFFile")
	{
	}

Visualization::Abstract::DataSet* XDMFFile::load(const std::vector<std::string>& args,Comm::MulticastPipe* pipe) const
	{
   /* XDMF variables: */
   XdmfDOM* dom;
   XdmfGrid* meshGrid;
   XdmfTopology* topology;
   XdmfArray* connections;
   XdmfGeometry* geometry;
   XdmfHDF* heavyData;
   XdmfTime* time;
   XdmfInt32 gridCount;

	/* Open the data file: */
   dom=new XdmfDOM();

   if(dom->Parse("MyXDMF.xml")!=XDMF_SUCCESS)
      Misc::throwStdErr("XDMFFileReader::XDMFFileReader: error parsing the xdmf file");

   /* Get the number of Grid elements: */
   gridCount=dom->FindNumberOfElements("Grid"); 

   /* Get the mesh grid: */
   meshGrid=new XdmfGrid();
   meshGrid->SetDOM(dom);
   meshGrid->SetElement(dom->FindElementByPath("/Xdmf/Domain/Grid"));

   /* Read the light data: */
   meshGrid->UpdateInformation();

   /* Read the heavy data (topology, geometry): */
   meshGrid->Update();

   /* Get the topology: */
   topology=meshGrid->GetTopology();

   /* Get the connectivity/connections: */
   connections=topology->GetConnectivity();

   /* Get the geometry: */
   geometry=meshGrid->GetGeometry();

   /* Get the attributes: */
   for(int i=0;i<meshGrid->GetNumberOfAttributes();++i)
      {
      XdmfAttribute* attribute=meshGrid->GetAttribute(i);  
      }

   /* Size of data set in C memory / file order: Z varies fastest, then X, then Y: */
   DS::Index numNodes(-1,-1,-1);
	
	/* Create result data set: */
	EarthDataSet<DataSet>* result=new EarthDataSet<DataSet>(args);
	result->getDs().setData(numNodes);

	return result;
	}

Visualization::Abstract::DataSetRenderer* XDMFFile::getRenderer(const Visualization::Abstract::DataSet* dataSet) const
	{
	return new EarthDataSetRenderer<DataSet,DataSetRenderer>(dataSet);
	}

int XDMFFile::getNumScalarAlgorithms(void) const
	{
	return BaseModule::getNumScalarAlgorithms();
	}

int XDMFFile::getNumVectorAlgorithms(void) const
	{
	return 0;
	}

}

}

/***************************
Plug-in interface functions:
***************************/

extern "C" Visualization::Abstract::Module* createFactory(Plugins::FactoryManager<Visualization::Abstract::Module>& manager)
	{
	/* Create module object and insert it into class hierarchy: */
	Visualization::Concrete::XDMFFile* module=new Visualization::Concrete::XDMFFile();
	
	/* Return module object: */
	return module;
	}

extern "C" void destroyFactory(Visualization::Abstract::Module* module)
	{
	delete module;
	}
