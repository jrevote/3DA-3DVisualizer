/***********************************************************************
XDMFFile - Class to encapsulate operations on files generated by the
CITCOMT simulation code.
Copyright (c) 2006-2007 Oliver Kreylos

This file is part of the 3D Data Visualizer (Visualizer).

The 3D Data Visualizer is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The 3D Data Visualizer is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the 3D Data Visualizer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <iomanip>
#include <Misc/ThrowStdErr.h>
#include <Misc/File.h>
#include <Misc/LargeFile.h>
#include <Plugins/FactoryManager.h>
#include <Math/Math.h>
#include <Geometry/Endianness.h>
#include <Concrete/EarthDataSet.h>
#include <Concrete/XDMFFile.h>
#include <Xdmf.h>

namespace Visualization {

namespace Concrete {

/****************************
Methods of class XDMFFile:
****************************/

XDMFFile::XDMFFile(void)
	:BaseModule("XDMFFile")
	{
	}

Visualization::Abstract::DataSet* XDMFFile::load(const std::vector<std::string>& args,Comm::MulticastPipe* pipe) const
	{
   XdmfHDF* heavyData;

	/* Create result data set: */
   DataSet* result = new DataSet;

   /* Create the Domain Object Model: */
   XdmfDOM* dom=new XdmfDOM();

	/* Open the data file: */
   if(dom->Parse(args[0].c_str())!=XDMF_SUCCESS)
      Misc::throwStdErr("XDMFFileReader::XDMFFileReader: error parsing the xdmf file");

   /* Get the mesh grid node: */
   XdmfXmlNode meshGridNode=dom->FindElementByPath("/Xdmf/Domain/Grid[1]");

   /* Create the mesh grid: */
   std::cout<<"Loading Grid..."<<std::flush;
   XdmfGrid* meshGrid=new XdmfGrid();
   meshGrid->SetDOM(dom);
   meshGrid->SetElement(meshGridNode);

   /* Read the light data: */
   meshGrid->UpdateInformation();

   /* Read the heavy data (topology, geometry): */
   meshGrid->Update();

   std::cout<<"(DONE)\n"<<std::flush;
   std::cout<<"   Name: "<<dom->GetAttribute(meshGridNode,"Name")<<"\n"<<std::flush;
   std::cout<<"   Number of Attributes: "<<meshGrid->GetNumberOfAttributes()<<"\n"<<std::flush;

   /* Get the topology: */
   std::cout<<"Loading Topology..."<<std::flush;
   XdmfTopology* topology=meshGrid->GetTopology();
   XdmfConstString topologyType=topology->GetTopologyTypeAsString();
   std::cout<<"(DONE)\n"<<std::flush;
   std::cout<<"   Type: "<<topologyType<<"\n"<<std::flush;
   std::cout<<"   Number of Elements: "<<topology->GetNumberOfElements()<<"\n"<<std::flush;

   /* Get the connectivity/connections: */
   std::cout<<"Loading Connections..."<<std::flush;
   XdmfArray* connections=topology->GetConnectivity();
   std::cout<<"(DONE)\n"<<std::flush;

   int verticesPerElement;

   if(!strcmp(topologyType,"Hexahedron"))
      {
      verticesPerElement=8;
      }
   for(int conn_I=0;conn_I<topology->GetNumberOfElements();++conn_I)
      {
      for(int stride_I=0;stride_I<verticesPerElement;++stride_I)
         {
         std::cout<<connections->GetValueAsInt32((conn_I*verticesPerElement)+stride_I)<<" "<<std::flush;
         }
      std::cout<<"\n"<<std::flush;
      //std::cout<<connections->GetValues((conn_I*verticesPerElement),verticesPerElement)<<"\n"<<std::flush;
      }

   /* Get the geometry: */
   std::cout<<"Loading Geometry..."<<std::flush;
   XdmfGeometry* geometry=meshGrid->GetGeometry();
   std::cout<<"(DONE)\n"<<std::flush;
   std::cout<<"   Type: "<<geometry->GetGeometryTypeAsString()<<"\n"<<std::flush;
   std::cout<<"   Number of Points: "<<geometry->GetNumberOfPoints()<<"\n"<<std::flush;

   /* Get the points/vertices from the geometry: */
   std::cout<<"Loading Points...\n"<<std::flush;
   XdmfArray* vertices=geometry->GetPoints();
#if 0
   /* Define the result data set's grid layout: */
   DS& dataSet = result->getDs(); // Get the internal data representation from the result data set
   dataSet.setGrid((const int)geometry->GetNumberOfPoints()); // Set the data set's number of vertices

   /* Define the result data set's variables as they are selected in 3D Visualizer's menus: */
   DataValue& dataValue = result->getDataValue(); // Get the internal representations of the data set's value space
   dataValue.initialize(&dataSet); // Initialize the value space for the data set
#endif
   for(int point_I=0;point_I<geometry->GetNumberOfPoints();++point_I)
      {
      DS::Index index; // Index counting variable containing three integers I, J, K
      XdmfFloat64 x,y,z;
      double pos[3];
      /* 
      index[0]=point_I*3;
      index[1]=(point_I*3)+1;
      index[2]=(point_I*3)+2;
      x=vertices->GetValueAsFloat64(index[0]);
      y=vertices->GetValueAsFloat64(index[1]);
      z=vertices->GetValueAsFloat64(index[2]);
      pos[0]=x;
      pos[1]=y;
      pos[2]=z;

      dataSet.getVertexPosition(index)=DS::Point(pos);*/
      //std::cout<<"xyz: "<<x<<" "<<y<<" "<<z<<"\n"<<std::flush;
      }

   /* Release the grid big data: */
   meshGrid->Release();

   /* Get the attributes: */
   std::cout<<"Loading Attributes...\n"<<std::flush;
   for(int attr_I=0;attr_I<meshGrid->GetNumberOfAttributes();++attr_I)
      {
      XdmfAttribute* attribute=meshGrid->GetAttribute(attr_I);
      attribute->UpdateInformation();
      attribute->Update();
      std::cout<<"   Found Attribute: "<<attribute->Get("Name")<<"\n"<<std::flush;
      std::cout<<"      Type: "<<attribute->GetAttributeTypeAsString()<<"\n"<<std::flush;
      std::cout<<"      Center: "<<attribute->GetAttributeCenterAsString()<<"\n"<<std::flush;

      XdmfArray* values=attribute->GetValues();
      std::cout<<values<<" "<<values->GetValues()<<"\n"<<std::flush;

      /*XdmfHDF* attrH5=new XdmfHDF();
      char dataFile[100];
      strcpy(dataFile,attribute->Get("Name"));
      strcat(dataFile,".00001.h5:/data");
   
      attrH5->Open(dataFile);
      std::cout<<"      Opened H5 file: "<<dataFile<<"\n"<<std::flush;
      attrH5->Close();*/

      /* Initialise and read the attribute big data: */
      /*attribute->Update();*/

      /* Release attribute big data: */
      attribute->Release();
      }

   /* Finalize the data set's grid structure (required): */
   //dataSet.finalizeGrid();
 
   /* Return the result data set: */
	return result;
	}

Visualization::Abstract::DataSetRenderer* XDMFFile::getRenderer(const Visualization::Abstract::DataSet* dataSet) const
	{
	return new EarthDataSetRenderer<DataSet,DataSetRenderer>(dataSet);
	}

int XDMFFile::getNumScalarAlgorithms(void) const
	{
	return BaseModule::getNumScalarAlgorithms();
	}

int XDMFFile::getNumVectorAlgorithms(void) const
	{
	return 0;
	}

}

}

/***************************
Plug-in interface functions:
***************************/

extern "C" Visualization::Abstract::Module* createFactory(Plugins::FactoryManager<Visualization::Abstract::Module>& manager)
	{
	/* Create module object and insert it into class hierarchy: */
	Visualization::Concrete::XDMFFile* module=new Visualization::Concrete::XDMFFile();
	
	/* Return module object: */
	return module;
	}

extern "C" void destroyFactory(Visualization::Abstract::Module* module)
	{
	delete module;
	}
